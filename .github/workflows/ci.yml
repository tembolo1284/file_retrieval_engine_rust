name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

    - name: Generate code coverage
      uses: actions-rs/tarpaulin@v0.1
      with:
        version: '0.15.0'
        args: '-- --test-threads 1'

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: rust-tests

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Python cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest maturin>=0.14,<0.15 pytest-cov

    - name: Build Python bindings
      run: |
        maturin develop --release

    - name: Verify Python import
      run: |
        python -c "import file_retrieval_engine; print('Imported successfully!')"

    - name: Create Python tests
      run: |
        mkdir -p tests
        cat > tests/test_basic.py << 'EOF'
        import pytest
        from file_retrieval_engine import PyIndexStore, PyClient

        def test_index_store_creation():
            store = PyIndexStore()
            assert store is not None

        def test_client_creation():
            client = PyClient()
            assert client is not None
        EOF

    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=file_retrieval_engine

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests]

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --verbose

    - name: Create test directories and files
      run: |
        mkdir -p test_data/folder1
        mkdir -p test_data/folder2
        echo "This is a test document with some keywords like example and test." > test_data/folder1/doc1.txt
        echo "Another document with different content but some common words like test." > test_data/folder1/doc2.txt
        echo "Third document with example content." > test_data/folder2/doc3.txt

    - name: Start server in background
      run: |
        ./target/release/file-retrieval-server 12345 &
        # Save the PID so we can kill it later
        echo $! > server.pid
        sleep 2  # Give server time to start

    - name: Test client indexing and search
      run: |
        # Run client commands via a script
        cat > test_client.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Connect and index
        echo "connect 127.0.0.1 12345" | ./target/release/file-retrieval-client
        echo "index test_data/folder1" | ./target/release/file-retrieval-client
        
        # Search
        search_result=$(echo "search test" | ./target/release/file-retrieval-client)
        echo "$search_result"
        if ! echo "$search_result" | grep -q "doc1.txt"; then
          echo "Document doc1.txt not found in search results"
          exit 1
        fi
        if ! echo "$search_result" | grep -q "doc2.txt"; then
          echo "Document doc2.txt not found in search results"
          exit 1
        fi
        
        echo "All client tests passed!"
        EOF
        
        chmod +x test_client.sh
        ./test_client.sh

    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid)
          rm server.pid
        fi
